//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tavisca.Frameworks.Session.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SessionResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SessionResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Tavisca.Frameworks.Session.Resources.SessionResources", typeof(SessionResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The aeroSpike client needs the connection string defined in the configuration to be in the format: &lt;host address&gt;:&lt;port number&gt;, the value is : {0}.
        /// </summary>
        internal static string AeroSpike_IncorrectConnString {
            get {
                return ResourceManager.GetString("AeroSpike_IncorrectConnString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The port number defined in the config was not a valid integer, the value supplied was {0}..
        /// </summary>
        internal static string AeroSpike_InvalidPort {
            get {
                return ResourceManager.GetString("AeroSpike_InvalidPort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration for Session is missing, the session data store cannot run without certain sections of the configuration defined, kindly refer documentation..
        /// </summary>
        internal static string Configuration_MissingError {
            get {
                return ResourceManager.GetString("Configuration_MissingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The customProviderType defined in the config must implement {0}.
        /// </summary>
        internal static string CustomProvider_InvalidType {
            get {
                return ResourceManager.GetString("CustomProvider_InvalidType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When provider is set to custom, customProviderType must be specified. Check configuration..
        /// </summary>
        internal static string CustomProvider_Missing {
            get {
                return ResourceManager.GetString("CustomProvider_Missing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DynamoDB provider cannot handle data that is greater than 350KB*25 in length..
        /// </summary>
        internal static string DataTooLarge {
            get {
                return ResourceManager.GetString("DataTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DynamoDB connection string was empty, kindly provide a correct connection string according to the documentation..
        /// </summary>
        internal static string DynamoDB_EmptyConnString {
            get {
                return ResourceManager.GetString("DynamoDB_EmptyConnString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dynamo DB returned an error response with http status code as &apos;{0}&apos;. Check data for meta data recieved (if any)..
        /// </summary>
        internal static string DynamoDB_ErrorInResponse {
            get {
                return ResourceManager.GetString("DynamoDB_ErrorInResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DynamoDB connection string was of incorrect format, expected format is an encrypted form of &apos;{0}&apos;..
        /// </summary>
        internal static string DynamoDB_IncorrectConnString {
            get {
                return ResourceManager.GetString("DynamoDB_IncorrectConnString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The encryption/decryption logic requires a key defined in the configuration file. Section: &quot;SecureAppSettings&quot;/&quot;EncryptionKey&quot;.
        /// </summary>
        internal static string EncryptionKeyRequired {
            get {
                return ResourceManager.GetString("EncryptionKeyRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error has occurred, kindly check inner exception for more details..
        /// </summary>
        internal static string Error_Generic {
            get {
                return ResourceManager.GetString("Error_Generic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error decrypting connection string, check inner exception for more details..
        /// </summary>
        internal static string ErrorDecryptingConnString {
            get {
                return ResourceManager.GetString("ErrorDecryptingConnString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The customFormatterType defined in the config must implement {0}..
        /// </summary>
        internal static string Formatter_InvalidType {
            get {
                return ResourceManager.GetString("Formatter_InvalidType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When formatter is set to custom, customFormatterType must be specified. Check configuration..
        /// </summary>
        internal static string Formatter_Missing {
            get {
                return ResourceManager.GetString("Formatter_Missing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid ConnectionString specified in the config for session, provider was {0}. Check documentation for valid samples..
        /// </summary>
        internal static string Invalid_ConnString {
            get {
                return ResourceManager.GetString("Invalid_ConnString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} provider expects the key to represent a valid guid. Check documentation..
        /// </summary>
        internal static string Key_Not_Guid {
            get {
                return ResourceManager.GetString("Key_Not_Guid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Redis.
        /// </summary>
        internal static string ProviderName_Redis {
            get {
                return ResourceManager.GetString("ProviderName_Redis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sql.
        /// </summary>
        internal static string ProviderName_Sql {
            get {
                return ResourceManager.GetString("ProviderName_Sql", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Redis provider could not resolve the ip address behind the provided address, no ip addresses were found. The attempted address was &apos;{0}&apos;..
        /// </summary>
        internal static string Redis_DNSResolutionException {
            get {
                return ResourceManager.GetString("Redis_DNSResolutionException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Session Api: The typeInfo could not be loaded, it was tried from: {0}. This is most likely defined in configuration..
        /// </summary>
        internal static string Type_Not_Found {
            get {
                return ResourceManager.GetString("Type_Not_Found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The item count field must contain a valid integer, the data found is invalid..
        /// </summary>
        internal static string UnexpectedDynamoData {
            get {
                return ResourceManager.GetString("UnexpectedDynamoData", resourceCulture);
            }
        }
    }
}
